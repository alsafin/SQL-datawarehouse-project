---------------------------Database Exploration------------------------------------
USE DataWarehouse;

GO
--explore all objects in database
SELECT
    *
FROM
    INFORMATION_SCHEMA.TABLES
    --explore all columns in database
SELECT
    *
FROM
    INFORMATION_SCHEMA.COLUMNS
WHERE
    TABLE_NAME = 'dim_customers'
    --_________________________________________________________________________________
    ----------------------------Dimension Exploration----------------------------------
    --explore all countries from cutomer come
SELECT DISTINCT
    country
FROM
    gold.dim_customers
    --explore all product categorie 'the majore division'
SELECT DISTINCT
    categorie,
    sub_categorie,
    product_name
FROM
    gold.dim_products
ORDER BY
    1,
    2,
    3
    ---------------------------Date exploration----------------------------------------
    --_________________________________________________________________________________
    ----------------identify the earliest and latest date (boundaries)-----------------
    /*
    understand the scope of data and the timespan 
    
     */
    --find the date of the first and last order 
    --how many years of sales available
SELECT
    MIN(order_date) AS first_order_date,
    MAX(order_date) AS last_order_date,
    DATEDIFF (YEAR, MIN(order_date), MAX(order_date)) AS year_sales_available
FROM
    GOLD.fact_sales
    --find the youngest and oldest custommer 
SELECT
    MIN(birth_date) AS oldest_birth_date,
    DATEDIFF (YEAR, MIN(birth_date), GETDATE ()) AS oldest_age,
    MAX(birth_date) AS youngest_birth_date,
    DATEDIFF (YEAR, MAX(birth_date), GETDATE ()) AS youngest_age
FROM
    gold.dim_customers
    ---------------------------Measure Exploration---------------------------
    /*
    calculate the key matrics of the business(Big number)
    -highest level of aggregatoion / lowest level of details 
     */
    --find the total sales
SELECT
    SUM(sales_amount) AS total_sales
FROM
    gold.fact_sales
    --find how many items are sold
SELECT
    SUM(quantity) AS total_quantity
FROM
    gold.fact_sales
    --find the average selling price
SELECT
    AVG(price) AS avg_price
FROM
    gold.fact_sales
    --find the total number of orders
SELECT
    COUNT(DISTINCT order_number) AS total_order
FROM
    gold.fact_sales
    --find the total numbers of products
SELECT
    COUNT(product_key) AS total_product
FROM
    gold.dim_products
    --find the total number of customer
SELECT
    COUNT(customer_key) AS total_customers
FROM
    gold.dim_customers
    --find the total number of customer who have place order
SELECT
    COUNT(DISTINCT customer_key) AS total_customers
FROM
    gold.fact_sales
    ----------------Generate report that show all value -------------------------
SELECT
    'total_sales' AS measure_name,
    SUM(sales_amount) AS mesure_value
FROM
    gold.fact_sales
UNION ALL
SELECT
    'total_quantity' AS measure_name,
    SUM(quantity) AS mesure_value
FROM
    gold.fact_sales
UNION ALL
SELECT
    'avg_price' AS measure_name,
    AVG(price) AS measure_value
FROM
    gold.fact_sales
UNION ALL
SELECT
    'total_order' AS measure_name,
    COUNT(DISTINCT order_number) AS measure_value
FROM
    gold.fact_sales
UNION ALL
SELECT
    'total_number_of_product' AS measure_name,
    COUNT(product_name) AS measure_value
FROM
    gold.dim_products
UNION ALL
SELECT
    'total_customers' AS measure_name,
    COUNT(customer_key) AS measure_value
FROM
    gold.dim_customers
    ---------------------------------------magnitude analysis----------------------------------
    /*
    comparing the meausre values by categories
    --it helps us understand the importance of diffrent categories 
     */
    --find total customer by countries
SELECT
    country,
    COUNT(customer_key) AS total_customers
FROM
    gold.dim_customers
GROUP BY
    country
ORDER BY
    total_customers DESC
    --find total customer by gender
SELECT
    gender,
    COUNT(customer_key) AS total_customers
FROM
    gold.dim_customers
GROUP BY
    gender
ORDER BY
    total_customers DESC
    --find total product by categories
SELECT
    categorie,
    COUNT(product_key) AS total_product
FROM
    gold.dim_products
GROUP BY
    categorie
ORDER BY
    total_product DESC
    --what is the avg cost in each category
SELECT
    categorie,
    AVG(cost) AS avg_cost
FROM
    gold.dim_products
GROUP BY
    categorie
ORDER BY
    avg_cost DESC
    --what is the total revenue generated for each categories
SELECT
    p.categorie,
    SUM(f.sales_amount) AS total_revenue
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
GROUP BY
    P.categorie
ORDER BY
    total_revenue DESC
    --find the total revenure generated by each customer
SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_customers c ON c.customer_key = f.customer_key
GROUP BY
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY
    total_revenue DESC
    --what is the distribution of sold item acroas countries
SELECT
    c.country,
    SUM(f.quantity) AS total_quantity
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_customers c ON c.customer_key = f.customer_key
GROUP BY
    c.country
ORDER BY
    total_quantity DESC
    --------------------------------------Ranking Analysis-------------------------------------------
    /*
    order the value of dimension by measure
    -top/bottom cutomers 
     */
    --which 5 products generate the highest revenue
SELECT
    TOP 5 p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
GROUP BY
    P.product_name
ORDER BY
    total_revenue DESC
    --what are the 5-worst performing products in terms of sale
SELECT
    TOP 5 p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
GROUP BY
    P.product_name
ORDER BY
    total_revenue
    --find the top 10 customer who have generated the highest revenue and  3 customers with the fewest order place
SELECT
    TOP 10 c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_customers c ON c.customer_key = f.customer_key
GROUP BY
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY
    total_revenue DESC
SELECT
    TOP 3 c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT f.order_number) AS total_order
FROM
    gold.fact_sales f
    LEFT JOIN gold.dim_customers c ON c.customer_key = f.customer_key
GROUP BY
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY
    total_order
